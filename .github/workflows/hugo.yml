# Hugo 站点构建和部署到 GitHub Pages
name: Deploy Hugo site to Pages

on:
  # 推送到主分支时触发
  push:
    branches: ["main"]
  
  # 允许手动触发工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 权限以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在进行和最新排队之间的运行
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: "pages"
  cancel-in-progress: false

# 默认使用 bash
defaults:
  run:
    shell: bash

jobs:
  # 构建作业
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.134.3
      NODE_VERSION: 18
    
    steps:
      # 1. 安装 Hugo CLI (Extended 版本)
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
          
      # 2. 安装 Dart Sass
      - name: Install Dart Sass
        run: sudo snap install dart-sass
        
      # 3. 检出代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0  # 获取完整历史，用于 .GitInfo 和 .Lastmod
          
      # 4. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      # 5. 安装 Node.js 依赖
      - name: Install Node.js dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f package.json ]; then
            npm install
          fi
          
      # 6. 构建 UnoCSS
      - name: Build UnoCSS
        run: |
          if [ -f package.json ] && grep -q "build:uno:prod" package.json; then
            npm run build:uno:prod
          fi
          
      # 7. 设置 Pages
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        
      # 8. 调试信息
      - name: Debug Hugo setup
        run: |
          echo "=== Hugo Version ==="
          hugo version
          echo ""
          echo "=== Hugo Environment ==="
          hugo env
          echo ""
          echo "=== Checking shortcodes directory ==="
          ls -la layouts/_shortcodes/ || echo "No _shortcodes directory"
          ls -la layouts/shortcodes/ || echo "No shortcodes directory"
          echo ""
          echo "=== Checking config ==="
          ls -la config/_default/
          echo ""
          echo "=== Checking assets ==="
          ls -la assets/ || echo "No assets directory"
          echo ""
          echo "=== Node.js and npm versions ==="
          node --version
          npm --version
          echo ""
          
      # 10. 使用 Hugo 构建站点
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
          TZ: Asia/Shanghai
        run: |
          hugo \
            --gc \
            --minify \
            --cleanDestinationDir \
            --verbose \
            --logLevel info
            
      # 1`. 验证构建结果
      - name: Verify build
        run: |
          echo "=== Build output ==="
          ls -la public/
          echo ""
          echo "=== Checking for critical files ==="
          [ -f public/index.html ] && echo "✓ index.html exists" || echo "✗ index.html missing"
          [ -f public/sitemap.xml ] && echo "✓ sitemap.xml exists" || echo "✗ sitemap.xml missing"
          echo ""
          echo "=== Public directory size ==="
          du -sh public/
          
      # 11. 上传构建产物
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # 部署作业
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      # 12. 部署后验证
      - name: Verify deployment
        run: |
          echo "🚀 Site deployed successfully!"
          echo "📍 URL: ${{ steps.deployment.outputs.page_url }}"
          
          # 简单的健康检查
          sleep 30  # 等待部署完成
          curl -f -s -o /dev/null "${{ steps.deployment.outputs.page_url }}" && \
            echo "✓ Site is accessible" || \
            echo "⚠️ Site might not be ready yet"